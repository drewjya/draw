package shape

import (
	"bytes"
	"io"
	"os"
	"testing"

	"github.com/gregoryv/asserter"
)

func Test_shapes_write_svg(t *testing.T) {
	cases := []struct {
		shape   SvgWriter
		xmlText string
	}{
		{&Line{X1: 0, Y1: 0, X2: 100, Y2: 0}, `<line x1="0"`},
		{&Svg{}, "<svg width"},
		{&Svg{Content: []SvgWriter{&Line{}}}, ">\n<line"},
		{&Label{
			Text: "hello",
		}, "<text x="},
	}
	assert := asserter.New(t)
	for _, c := range cases {
		buf := bytes.NewBufferString("")
		c.shape.WriteSvg(buf)
		assert().Contains(buf.String(), c.xmlText)
	}
}

func Test_example_shapes(t *testing.T) {
	cases := []struct {
		shape SvgWriter
	}{
		{
			&Svg{
				Width:  100,
				Height: 200,
				Content: []SvgWriter{
					&Line{X1: 0, Y1: 0, X2: 100, Y2: 0},
					&Label{
						Y:    40,
						Text: "Label",
					},
					&Record{
						Y:       70,
						Width:   100, // todo calculate perhaps
						Height:  30,
						Title:   "Record",
						Font:    Font{Height: 10},
						Padding: Padding{Left: 10, Top: 5},
					},
				},
			},
		},
	}
	fh, err := os.Create("allshapes.md")
	if err != nil {
		t.Fatal(err)
	}
	fh.WriteString("# Shapes\n\nGenerated by shape_test.go\n\n")
	styler := &Styler{fh}
	for _, c := range cases {
		c.shape.WriteSvg(styler)
	}
}

type Styler struct {
	dest io.Writer
}

func (styler *Styler) Write(b []byte) (int, error) {
	s := bytes.ReplaceAll(b,
		[]byte("<line"),
		[]byte(`<line style="stroke: black"`),
	)
	s = bytes.ReplaceAll(s,
		[]byte("<rect"),
		[]byte(`<rect style="fill:#ffffcc;stroke:black"`),
	)

	return styler.dest.Write(s)
}
