package shape

import (
	"os"
	"strings"
	"testing"

	"github.com/gregoryv/asserter"
)

func Test_shapes_write_svg(t *testing.T) {
	cases := []struct {
		shape   svg
		xmlText string
	}{
		{&Line{X1: 0, Y1: 0, X2: 100, Y2: 0}, `<line x1="0"`},
		{&Svg{}, "<svg width"},
		{&Svg{Content: []svg{&Line{}}}, ">\n<line"},
		{&Label{
			Text: "hello",
		}, "<text x="},
	}
	assert := asserter.New(t)
	for _, c := range cases {
		assert().Contains(c.shape.Svg(), c.xmlText)
	}
}

func Test_example_shapes(t *testing.T) {
	cases := []struct {
		shape svg
	}{
		{
			&Svg{
				Width:  100,
				Height: 200,
				Content: []svg{
					&Line{X1: 0, Y1: 0, X2: 100, Y2: 0},
					&Label{
						Y:    40,
						Text: "Label",
					},
					&Record{
						Y:       70,
						Width:   100, // todo calculate perhaps
						Height:  30,
						Title:   "Record",
						Font:    Font{Height: 10},
						Padding: Padding{Left: 10, Top: 5},
					},
				},
			},
		},
	}
	fh, err := os.Create("allshapes.md")
	if err != nil {
		t.Fatal(err)
	}
	fh.WriteString("# Shapes\n\nGenerated by shape_test.go\n\n")
	for _, c := range cases {
		fh.WriteString(style(c.shape.Svg()))
	}
}

func style(xml string) string {
	s := strings.ReplaceAll(xml, "<line", `<line style="stroke: black"`)
	s = strings.ReplaceAll(s, "<rect",
		`<rect style="fill:#ffffcc;stroke:black"`)
	return s
}
