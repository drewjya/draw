package shape

import (
	"bytes"
	"io"
	"os"
	"testing"
)

func Test_example_shapes(t *testing.T) {
	y := 0
	addy := func(Y int) int {
		y += Y
		return y
	}
	cases := []struct {
		shape SvgWriter
	}{
		{
			&Svg{
				Width:  300,
				Height: 200,
				Content: []SvgWriter{
					&Line{X1: 0, Y1: y, X2: 100, Y2: 0},
					&Label{
						Y:    addy(40),
						Text: "Label",
					},
					&Record{
						Y:     addy(20),
						Title: "Record",
						Font:  Font{Height: 9, Width: 7, LineHeight: 15},
						Pad:   Padding{Left: 10, Top: 2, Bottom: 7, Right: 10},
						PublicFields: []string{
							"Write",
							"SetLabel",
						},
					},

					&Record{
						X:     100,
						Y:     y,
						Title: "Record without fields",
						Font:  Font{Height: 9, Width: 7, LineHeight: 15},
						Pad:   Padding{Left: 10, Top: 2, Bottom: 7, Right: 10},
					},
				},
			},
		},
	}
	fh, err := os.Create("allshapes.md")
	if err != nil {
		t.Fatal(err)
	}
	fh.WriteString("# Shapes\n\nGenerated by shape_test.go\n\n")
	styler := &Styler{fh}
	for _, c := range cases {
		c.shape.WriteSvg(styler)
	}
}

type Styler struct {
	dest io.Writer
}

func (styler *Styler) Write(b []byte) (int, error) {
	s := bytes.ReplaceAll(b,
		[]byte("<line"),
		[]byte(`<line style="stroke: black"`),
	)
	s = bytes.ReplaceAll(s,
		[]byte("<rect"),
		[]byte(`<rect style="fill:#ffffcc;stroke:black"`),
	)

	return styler.dest.Write(s)
}
